name: Build and Deploy Front and Back

on:
  workflow_dispatch:
  push:
    tags:
      - 'v**' # Déclenche l'exécution uniquement pour les tags qui commencent par "v" et on 3 nombre avec un point entre chaque

env:
  ARTIFACTS_PATH: ${{ github.workspace }}/artifacts
  SOURCES_DIR: sources

jobs:
  package-front:
    name: Package Front
    runs-on: ubuntu-latest
    env:
      TARGET_DIR: front
    steps:
      - name: Checkout project
        uses: actions/checkout@v4.2.2
      - name: Generate slug variables
        uses: rlespinasse/github-slug-action@v5.0.0
      - name: Build package for front
        shell: bash
        run: |
          PACKAGE=${TARGET_DIR}-${{ env.GITHUB_REF_SLUG_URL }}.tar.gz
          mkdir ${SOURCES_DIR}
          rsync -rt --partial --exclude='.github' --exclude='.github' --exclude='.env.exemple' --exclude='.gitignore' --exclude='Dockerfile' ${TARGET_DIR} ${SOURCES_DIR}
          cp delivery/delivery-${TARGET_DIR}.sh ${SOURCES_DIR}
          tar -hpczf "${PACKAGE}" --exclude='.git' --exclude='.github' --exclude='Dockerfile' --exclude='README.md' "${SOURCES_DIR}"
          mkdir "${ARTIFACTS_PATH}"
          cp "${PACKAGE}" "${ARTIFACTS_PATH}"
          ls -la ${{ github.workspace }}/artifacts
          ls -la ${ARTIFACTS_PATH}
      - name: Upload front package artifact
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: front-${{ env.GITHUB_REF_SLUG_URL }}
          path: ${{ github.workspace }}/artifacts/front-${{ env.GITHUB_REF_SLUG_URL }}.tar.gz

  package-back:
    name: Package Back
    runs-on: ubuntu-latest
    env:
      TARGET_DIR: back
    steps:
      - name: Checkout project
        uses: actions/checkout@v4.2.2
      - name: Generate slug variables
        uses: rlespinasse/github-slug-action@v5.0.0
      - name: Build package for back
        shell: bash
        run: |
          PACKAGE=${TARGET_DIR}-${{ env.GITHUB_REF_SLUG_URL }}.tar.gz
          mkdir ${SOURCES_DIR}
          rsync -rt --partial --exclude='.github' --exclude='.github' --exclude='.env.exemple' --exclude='.gitignore' --exclude='Dockerfile' ${TARGET_DIR} ${SOURCES_DIR}
          cp delivery/delivery-${TARGET_DIR}.sh ${SOURCES_DIR}
          tar -hpczf ${PACKAGE} --exclude='.git' --exclude='.github' --exclude='Dockerfile' --exclude='README.md' "${SOURCES_DIR}"
          mkdir ${ARTIFACTS_PATH}
          cp ${PACKAGE} ${ARTIFACTS_PATH}
      - name: Upload back package artifact
        uses: actions/upload-artifact@v4
        env:
          PACKAGE_NAME: ${TARGET_DIR}-${{ env.GITHUB_REF_SLUG_URL }}
        with:
          if-no-files-found: error
          name: ${PACKAGE_NAME}
          path: ${ARTIFACTS_PATH}/${PACKAGE_NAME}.tar.gz

  deploy-front:
    name: Deploy Front
    needs: package-front
    runs-on: ubuntu-latest
    env:
      TARGET_DIR: front
    steps:
      - name: Checkout project
        uses: actions/checkout@v4.2.2
      - name: Generate slug variables
        uses: rlespinasse/github-slug-action@v5.0.0
      - name: Download front package artifact
        uses: actions/download-artifact@v4
        env:
          PACKAGE_NAME: ${TARGET_DIR}-${{ env.GITHUB_REF_SLUG_URL }}
        with:
          name: ${PACKAGE_NAME}
          path: ${ARTIFACTS_PATH}/${PACKAGE_NAME}.tar.gz
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          if test -n "${{ secrets.VPS_HOST }}"; then ssh-keyscan "${{ secrets.VPS_HOST }}" | tee -a ~/.ssh/known_hosts; fi
          echo "${{ secrets.VPS_SSH }}" | base64 -d | tr -d '\r' | ssh-add -
      - name: Deploy package on VPS
        run: |
          PACKAGE_NAME=${TARGET_DIR}-${{ env.GITHUB_REF_SLUG_URL }}
          PACKAGE=${PACKAGE_NAME}.tar.gz
          scp ${PACKAGE} "${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}"
          ssh "${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}" "tar zxf ${PACKAGE} && cd ./${PACKAGE_NAME} && ./delivery-${TARGET_DIR}.sh"

  deploy-back:
    name: Deploy Back
    needs: package-back
    runs-on: ubuntu-latest
    env:
      TARGET_DIR: back
    steps:
      - name: Checkout project
        uses: actions/checkout@v4.2.2
      - name: Generate slug variables
        uses: rlespinasse/github-slug-action@v5.0.0
      - name: Download back package artifact
        uses: actions/download-artifact@v4
        env:
          PACKAGE_NAME: ${TARGET_DIR}-${{ env.GITHUB_REF_SLUG_URL }}
        with:
          name: ${PACKAGE_NAME}
          path: ${ARTIFACTS_PATH}/${PACKAGE_NAME}.tar.gz
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          if test -n "${{ secrets.VPS_HOST }}"; then ssh-keyscan "${{ secrets.VPS_HOST }}" | tee -a ~/.ssh/known_hosts; fi
          echo "${{ secrets.VPS_SSH }}" | base64 -d | tr -d '\r' | ssh-add -
      - name: Deploy package on VPS
        run: |
          PACKAGE_NAME=${TARGET_DIR}-${{ env.GITHUB_REF_SLUG_URL }}
          PACKAGE=${PACKAGE_NAME}.tar.gz
          scp ${PACKAGE} "${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}"
          ssh "${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}" "tar zxf ${PACKAGE} && cd ./${PACKAGE_NAME} && ./delivery-${TARGET_DIR}.sh"

  restart-services:
    name: Restart Services
    runs-on: ubuntu-latest
    needs:
      - deploy-back
      - deploy-front
    env:
      SCRIPT_NAME: restart-services.sh
    steps:
      - name: Checkout project
        uses: actions/checkout@v4.2.2
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          if test -n "${{ secrets.VPS_HOST }}"; then ssh-keyscan "${{ secrets.VPS_HOST }}" | tee -a ~/.ssh/known_hosts; fi
          echo "${{ secrets.VPS_SSH }}" | base64 -d | tr -d '\r' | ssh-add -
      - name: Push package to VPS
        run: |
          scp delivery/${SCRIPT_NAME} "${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}"
      - name: Deploy package
        run: |
          ssh "${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}" "./${SCRIPT_NAME}"