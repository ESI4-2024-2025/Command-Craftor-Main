name: Build and Deploy Front and Back

on:
  workflow_dispatch:
  push:
    tags:
      - '^v[0-9]+.[0-9]+.[0-9]+' # Déclenche l'exécution uniquement pour les tags qui commencent par "v" et on 3 nombre avec un point entre chaque
      - '^snapshot-.*'

env:
  ARTIFACTS_PATH: ${{ github.workspace }}/artifacts
  SOURCES_DIR: sources

jobs:
  package-front:
    name: Package Front
    runs-on: ubuntu-latest
    env:
      TARGET_DIR: front
      PACKAGE_NAME: front-${{ github.ref_name }}
      PACKAGE: front-${{ github.ref_name }}.tar.gz
    steps:
      - uses: actions/checkout@v1
      - name: Build package for front
        shell: bash
        run: |
          mkdir ${SOURCES_DIR}
          cp -r delivery/delivery-${TARGET_DIR}.sh ${TARGET_DIR} ${SOURCES_DIR}
          tar -hpczf ${PACKAGE} --exclude='.git' --exclude='.github' --exclude='Dockerfile' --exclude='README.md' "$SOURCES_DIR"
          mkdir ${ARTIFACTS_PATH}
          cp ${PACKAGE} ${ARTIFACTS_PATH}
          ls -la ${ARTIFACTS_PATH}
      - name: Upload front package artifact
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: ${PACKAGE_NAME}
          path: ${ARTIFACTS_PATH}/${PACKAGE}

  package-back:
    name: Package Back
    runs-on: ubuntu-latest
    env:
      TARGET_DIR: back
      PACKAGE_NAME: back-${{ github.ref_name }}
      PACKAGE: back-${{ github.ref_name }}.tar.gz
    steps:
      - uses: actions/checkout@v1
      - name: Build package for back
        shell: bash
        run: |
          mkdir ${SOURCES_DIR}
          cp -r delivery/delivery-${TARGET_DIR}.sh ${TARGET_DIR} ${SOURCES_DIR}
          tar -hpczf ${PACKAGE} --exclude='.git' --exclude='.github' --exclude='Dockerfile' --exclude='README.md' "${SOURCES_DIR}"
          mkdir ${ARTIFACTS_PATH}
          cp ${PACKAGE} ${ARTIFACTS_PATH}
      - name: Upload back package artifact
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: $PACKAGE_NAME
          path: $ARTIFACTS_PATH/$PACKAGE

  deploy-front:
    name: Deploy Front
    needs: package-front
    runs-on: ubuntu-latest
    env:
      TARGET_DIR: front
      PACKAGE_NAME: front-${{ github.ref_name }}
      PACKAGE: front-${{ github.ref_name }}.tar.gz
    steps:
      - uses: actions/checkout@v1
      - name: Download front package artifact
        uses: actions/download-artifact@v4
        with:
          name: ${PACKAGE_NAME}
          path: ${ARTIFACTS_PATH}/${PACKAGE}
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          if test -n "${{ secrets.VPS_HOST }}"; then ssh-keyscan "${{ secrets.VPS_HOST }}" | tee -a ~/.ssh/known_hosts; fi
          echo "${{ secrets.VPS_SSH }}" | base64 -d | tr -d '\r' | ssh-add -
      - name: Push package to VPS
        run: |
          scp $PACKAGE "${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}"
      - name: Deploy package
        run: |
          ssh "${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}" "tar zxf ${PACKAGE} && cd ./${PACKAGE_NAME} && ./delivery-${TARGET_DIR}.sh"

  deploy-back:
    name: Deploy Back
    needs: package-back
    runs-on: ubuntu-latest
    env:
      TARGET_DIR: back
      PACKAGE_NAME: back-${{ github.ref_name }}
      PACKAGE: back-${{ github.ref_name }}.tar.gz
    steps:
      - uses: actions/checkout@v1
      - name: Download back package artifact
        uses: actions/download-artifact@v4
        with:
          name: ${PACKAGE_NAME}
          path: ${ARTIFACTS_PATH}/${PACKAGE}
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          if test -n "${{ secrets.VPS_HOST }}"; then ssh-keyscan "${{ secrets.VPS_HOST }}" | tee -a ~/.ssh/known_hosts; fi
          echo "${{ secrets.VPS_SSH }}" | base64 -d | tr -d '\r' | ssh-add -
      - name: Push package to VPS
        run: |
          scp $PACKAGE "${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}"
      - name: Deploy package
        run: |
          ssh "${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}" "tar zxf ${PACKAGE} && cd ./${PACKAGE_NAME} && ./delivery-${TARGET_DIR}.sh"

  restart-services:
    name: Restart Services
    runs-on: ubuntu-latest
    needs:
      - deploy-back
      - deploy-front
    env:
      SCRIPT_NAME: restart-services.sh
      SCRIPT_PATH: delivery/restart-services.sh
    steps:
      - uses: actions/checkout@v1
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          if test -n "${{ secrets.VPS_HOST }}"; then ssh-keyscan "${{ secrets.VPS_HOST }}" | tee -a ~/.ssh/known_hosts; fi
          echo "${{ secrets.VPS_SSH }}" | base64 -d | tr -d '\r' | ssh-add -
      - name: Push package to VPS
        run: |
          scp ${SCRIPT_PATH} "${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}"
      - name: Deploy package
        run: |
          ssh "${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}" "./${SCRIPT_NAME}"